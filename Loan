import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt
%matplotlib inline
import seaborn as sns
import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))
df= pd.read_csv('/kaggle/input/loan-prediction-problem-dataset/train_u6lujuX_CVtuZ9i.csv')
test = pd.read_csv('/kaggle/input/loan-prediction-problem-dataset/test_Y3wMUE5_7gLdaTN.csv')
df.head()
df.info()
test.head()
test.info()
n=df.shape[0]
df1 = pd.concat([df,test],axis=0)
df1.head(10)
df1.tail(10)
df.describe(include='all').T
test.describe(include='all').T
df.isnull().sum().sort_values(ascending=False)
test.isnull().sum().sort_values(ascending=False)
#for numerical type
df ['LoanAmount'] = df ['LoanAmount'].fillna(df ['LoanAmount'].mean())
df ['Loan_Amount_Term'] = df ['Loan_Amount_Term'].fillna(df ['Loan_Amount_Term'].mean())
df ['Credit_History'] = df ['Credit_History'].fillna(df ['Credit_History'].mean())
#For ccategorical type 
df ['Gender'] = df ['Gender'].fillna(df['Gender'].mode()[0])
df ['Married'] = df ['Married'].fillna(df['Married'].mode()[0])
df ['Dependents'] = df ['Dependents'].fillna(df['Dependents'].mode()[0])
df ['Self_Employed'] = df ['Self_Employed'].fillna(df['Self_Employed'].mode()[0])
#for gender
sns.countplot(x='Gender',data=df)
#as we can see Male applicant is more as compared to Female
#How do women and men compare when it comes to defaulting on loans in the historical dataset?
comp=df[['Loan_Status','Gender']].value_counts().to_frame()
comp
#for married 
sns.countplot(x='Married',data=df)
# The One's who are marrried are more likely to apply for a loan as compared to other status
sns.countplot(x='Dependents',data=df)
#How many of the loan applicants have dependents based on the historical dataset?
#The loan applicant who have zero dependent more likely to apply for a loan as comapared to other
sns.countplot(x='Education',data=df)
#no. of graduate applicant is more than the other
sns.countplot(x='Self_Employed',data=df)
#How do the incomes of those who are employed compare to those who are self employed based on the historical dataset?
#no. of non-self employed are more than the self employed
sns.countplot(x='Property_Area',data=df)

#all are nearly as compared to other 
# normalization for numerical features

df['ApplicantIncome']= np.log(df['ApplicantIncome'])
df['CoapplicantIncome']= np.log(df['CoapplicantIncome']+1)
df['LoanAmount'] = np.log(df['LoanAmount'])
df['Loan_Amount_Term']= np.log(df['Loan_Amount_Term'])
#visulization for above numerical features
#for applicant income 
sns.displot(df['ApplicantIncome'])
# For co applicant income 
sns.displot(df['CoapplicantIncome'])
# for loan amount 
sns.histplot(df['LoanAmount'])
# for loan term
sns.histplot(df['Loan_Amount_Term'])
sns.displot(df['Credit_History'])
corr=df.corr()
plt.figure(figsize=(12,7))
sns.heatmap(corr,annot=True, cmap='RdBu')
from sklearn.preprocessing import LabelEncoder
col = ['Gender','Married','Dependents','Education','Self_Employed','Property_Area','Loan_Status']
le=LabelEncoder()
for c in col:
    df[c]=le.fit_transform(df[c])
df.head()
df.drop(['Loan_ID'],axis=1,inplace=True)
df.reset_index(drop=True,inplace =True)
df.head()
#train_test_split

X=df.drop(columns=['Loan_Status'],axis=1)
y=df['Loan_Status']

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test= train_test_split(X,y,test_size=0.3,random_state=42)
#Model Training
from sklearn.model_selection import cross_val_score
def classify(model,x,y):
    x_train,x_test,y_train,y_test= train_test_split(x,y,test_size=0.3,random_state=42)
    model.fit(x_train,y_train)
    print('Accuracy is',model.score(x_test,y_test)*100)
    score=cross_val_score(model,x,y,cv=5)
    print('Cross validation is',np.mean(score)*100)
  
from sklearn.metrics import confusion_matrix
from sklearn.linear_model import LogisticRegression
model=LogisticRegression()
classify(model,X,y)
print(confusion_matrix(model.predict(X_test), y_test))
from sklearn.tree import DecisionTreeClassifier
model= DecisionTreeClassifier()
classify(model,X,y)
from sklearn.ensemble import RandomForestClassifier,ExtraTreesClassifier
model= RandomForestClassifier()
classify(model,X,y)
model= ExtraTreesClassifier()
classify(model,X,y)



